Q 4-9

import pandas as pd
import json

# Load JSON data
file_path = '/content/DataEngineeringQ2.json'
with open(file_path) as f:
    data = json.load(f)
patient_details = [entry['patientDetails'] for entry in data if 'patientDetails' in entry]

patient_details_df = pd.DataFrame(patient_details)

def calculate_missing_percentage(column):
    total_count = len(patient_details_df)
    missing_count = patient_details_df[column].isna().sum() + (patient_details_df[column] == '').sum()
    return (missing_count / total_count) * 100

first_name_missing_pct = calculate_missing_percentage('firstName')
last_name_missing_pct = calculate_missing_percentage('lastName')
dob_missing_pct = calculate_missing_percentage('birthDate')

first_name_missing_pct = round(first_name_missing_pct, 2)
last_name_missing_pct = round(last_name_missing_pct, 2)
dob_missing_pct = round(dob_missing_pct, 2)

result = f"{first_name_missing_pct}, {last_name_missing_pct}, {dob_missing_pct}"
result    


gender_mode = patient_details_df['gender'].mode()[0]
patient_details_df['gender'].fillna(gender_mode, inplace=True)
patient_details_df['gender'].replace('', gender_mode, inplace=True)

female_percentage = (patient_details_df['gender'].value_counts(normalize=True) * 100).get('Female', 0)
female_percentage = round(female_percentage, 2)
current_year = pd.to_datetime('now').year
patient_details_df['birthDate'] = pd.to_datetime(patient_details_df['birthDate'], errors='coerce')
patient_details_df['age'] = current_year - patient_details_df['birthDate'].dt.year
def age_group(age):
    if age <= 12:
        return 'Child'
    elif age <= 19:
        return 'Teen'
    elif age <= 59:
        return 'Adult'
    else:
        return 'Senior'

patient_details_df['ageGroup'] = patient_details_df['age'].apply(age_group)

adult_count = patient_details_df['ageGroup'].value_counts().get('Adult', 0)
medicines_data = [entry['consultationData']['medicines'] for entry in data if 'consultationData' in entry]
medicines_flat_list = [medicine for sublist in medicines_data for medicine in sublist]
medicines_df = pd.DataFrame(medicines_flat_list)
average_medicines = round(medicines_df.groupby(medicines_df.index).size().mean(), 2)

third_most_prescribed_medicine = medicines_df['medicineName'].value_counts().index[2]
total_medicines = medicines_df['isActive'].value_counts(normalize=True) * 100
active_percentage = round(total_medicines.get(True, 0), 2)
inactive_percentage = round(total_medicines.get(False, 0), 2)
female_percentage, adult_count, average_medicines, third_most_prescribed_medicine, active_percentage, inactive_percentage



Q10:
import pandas as pd
import json

file_path = 'DataEngineeringQ2.json'
with open(file_path, 'r') as file:
    data = json.load(file)

patient_records = []
for record in data:
    patient_detail = record.get('patientDetails', {})
    phone_number = record.get('phoneNumber', None)
    patient_detail['phoneNumber'] = phone_number
    patient_records.append(patient_detail)

df = pd.DataFrame(patient_records)

def is_valid_indian_phone_number(phone_number):
    if isinstance(phone_number, str):
        if phone_number.startswith('+91'):
            phone_number = phone_number[3:]
        elif phone_number.startswith('91'):
            phone_number = phone_number[2:]

        if phone_number.isdigit() and len(phone_number) == 10 and phone_number[0] in '6789':
            return True
    return False

df['isValidMobile'] = df['phoneNumber'].apply(is_valid_indian_phone_number)

valid_phone_count = df['isValidMobile'].sum()

print(valid_phone_count)


Q11: 

import pandas as pd
import json
from datetime import datetime

file_path = 'DataEngineeringQ2.json'
with open(file_path, 'r') as file:
    data = json.load(file)
patient_records = []
for record in data:
    patient_detail = record.get('patientDetails', {})
    consultation_data = record.get('consultationData', {})
    patient_detail['medicines'] = consultation_data.get('medicines', [])
    patient_records.append(patient_detail)

df = pd.DataFrame(patient_records)

current_year = datetime.now().year
df['birthDate'] = pd.to_datetime(df['birthDate'], errors='coerce')
df['age'] = current_year - df['birthDate'].dt.year

df['numMedicines'] = df['medicines'].apply(len)

correlation = df[['age', 'numMedicines']].corr(method='pearson').iloc[0, 1]

correlation = round(correlation, 2)
print(correlation)
